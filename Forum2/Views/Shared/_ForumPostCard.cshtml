@using Westwind.AspNetCore.Markdown
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@model ForumPost

@if (Model.IsSoftDeleted && !User.IsInRole("Administrator"))
{
    <div class="alert alert-secondary mb-4 fst-italic">
        This post has been deleted.
    </div>
}
else
{
    <div class="row mb-4">
        <div class="col-lg-3 mb-2 mb-lg-0">
            <partial name="_Profile" model="UserManager.FindByIdAsync(Model.CreatorId).Result"/>
        </div>
        <div class="col-lg-9">
            <div class="card h-100">
                @if (Model.IsSoftDeleted)
                {
                    <div class="card-header alert-danger d-flex justify-content-between align-items-center">
                        <span>This post is soft deleted.</span>
                        <a class="btn btn-sm btn-danger" asp-controller="ForumPost" asp-action="UnDeleteSelectedForumPost" asp-route-forumPostId="@Model.Id.ToString()">Undelete</a>
                    </div>
                }
                <div id="postContent_@Model.Id.ToString()" class="card-body py-2 d-flex flex-column justify-content-between">
                    <div class="post-content">
                        @Html.Raw(Markdown.Parse(Model.Content, sanitizeHtml: true))
                    </div>

                    <div>
                        @if (Model.EditedAt > Model.CreatedAt)
                        {
                            var editor = UserManager.FindByIdAsync(Model.EditedBy).Result;
                            <span class="text-muted fst-italic" style="font-size: 12px;">
                                Posted on @Model.CreatedAt.ToString("g"), edited by
                                <a asp-controller="Profile" asp-action="Index" asp-route-displayName="@editor.DisplayName" class="text-decoration-none link-dark">
                                    @editor.DisplayName
                                </a>
                                on @Model.EditedAt.ToString("g")
                            </span>
                        }
                        else
                        {
                            <span class="text-muted fst-italic" style="font-size: 12px;">
                                Posted on @Model.CreatedAt.ToString("g")
                            </span>
                        }
                    </div>
                </div>
                @if (SignInManager.IsSignedIn(User))
                {
                    <div class="card-footer py-2 px-3">
                        @if (!Model.Thread!.IsLocked)
                        {
                            <button class="btn btn-sm btn-dark d-inline" id="quoteThisPost_@Model.Id.ToString()">Quote Post</button>
                        }

                        @if (User.IsInRole("Administrator") || User.IsInRole("Moderator") || UserManager.GetUserAsync(User).Result.Id == Model.CreatorId)
                        {
                            @if (!Model.Thread!.IsLocked)
                            {
                                <a class="btn btn-sm btn-dark" asp-controller="ForumPost" asp-action="UpdateForumPostContent" asp-route-forumPostId="@Model.Id.ToString()">Edit Post</a>
                            }
                            @if (!Model.IsSoftDeleted)
                            {
                                <a class="btn btn-sm btn-danger" asp-controller="ForumPost" asp-action="DeleteSelectedForumPost" asp-route-forumPostId="@Model.Id.ToString()">Delete Post</a>
                            }
                        }
                    </div>
                }
            </div>
        </div>
    </div>
}

@if (SignInManager.IsSignedIn(User) && !Model.Thread!.IsLocked)
{
    <script>
        @* If input box is not visible, it will be created *@
        async function checkIfInputVisible()
        {
            if (!document.getElementById("createNewForumPost").innerHTML )
            {
                await $.ajax({
                    url: "/ForumPost/Create/@Model.ThreadId.ToString()",
                    success: function (html) {
                        // Update the page with the HTML of the partial view.
                        $("#createNewForumPost").html(html);
                    }
                });
            }
        }
        
        @* Quote handler *@
        async function quotePost()
        {
            await checkIfInputVisible();
            
            let result = "";
            
            const inputField = handleQuoteNewPost(easyMDE.value());
            const quotedPost = parseQuoteIn(" @Model.Content ");
           
            result += inputField;
            result += "Originally posted by @UserManager.FindByIdAsync(Model.CreatorId).Result.DisplayName\n";
            result += quotedPost;
        
            easyMDE.value(result);
            
            @* Hides button to create new post *@
            document.getElementById('createNewForumPostButton').hidden = true;
        }
    
        $("#quoteThisPost_@Model.Id.ToString()").click(quotePost);
    </script>
}